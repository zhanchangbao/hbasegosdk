// Code generated by protoc-gen-go. DO NOT EDIT.
// source: RPC.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// User Information proto.  Included in ConnectionHeader on connection setup
type UserInformation struct {
	EffectiveUser        *string  `protobuf:"bytes,1,req,name=effective_user,json=effectiveUser" json:"effective_user,omitempty"`
	RealUser             *string  `protobuf:"bytes,2,opt,name=real_user,json=realUser" json:"real_user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserInformation) Reset()         { *m = UserInformation{} }
func (m *UserInformation) String() string { return proto.CompactTextString(m) }
func (*UserInformation) ProtoMessage()    {}
func (*UserInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_438fa73ead152342, []int{0}
}

func (m *UserInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserInformation.Unmarshal(m, b)
}
func (m *UserInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserInformation.Marshal(b, m, deterministic)
}
func (m *UserInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInformation.Merge(m, src)
}
func (m *UserInformation) XXX_Size() int {
	return xxx_messageInfo_UserInformation.Size(m)
}
func (m *UserInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInformation.DiscardUnknown(m)
}

var xxx_messageInfo_UserInformation proto.InternalMessageInfo

func (m *UserInformation) GetEffectiveUser() string {
	if m != nil && m.EffectiveUser != nil {
		return *m.EffectiveUser
	}
	return ""
}

func (m *UserInformation) GetRealUser() string {
	if m != nil && m.RealUser != nil {
		return *m.RealUser
	}
	return ""
}

// This is sent on connection setup after the connection preamble is sent.
type ConnectionHeader struct {
	UserInfo    *UserInformation `protobuf:"bytes,1,opt,name=user_info,json=userInfo" json:"user_info,omitempty"`
	ServiceName *string          `protobuf:"bytes,2,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	// Cell block codec we will use sending over optional cell blocks.  Server throws exception
	// if cannot deal.  Null means no codec'ing going on so we are pb all the time (SLOW!!!)
	CellBlockCodecClass *string `protobuf:"bytes,3,opt,name=cell_block_codec_class,json=cellBlockCodecClass" json:"cell_block_codec_class,omitempty"`
	// Compressor we will use if cell block is compressed.  Server will throw exception if not supported.
	// Class must implement hadoop's CompressionCodec Interface.  Can't compress if no codec.
	CellBlockCompressorClass *string      `protobuf:"bytes,4,opt,name=cell_block_compressor_class,json=cellBlockCompressorClass" json:"cell_block_compressor_class,omitempty"`
	VersionInfo              *VersionInfo `protobuf:"bytes,5,opt,name=version_info,json=versionInfo" json:"version_info,omitempty"`
	// the transformation for rpc AES encryption with Apache Commons Crypto
	RpcCryptoCipherTransformation *string  `protobuf:"bytes,6,opt,name=rpc_crypto_cipher_transformation,json=rpcCryptoCipherTransformation" json:"rpc_crypto_cipher_transformation,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *ConnectionHeader) Reset()         { *m = ConnectionHeader{} }
func (m *ConnectionHeader) String() string { return proto.CompactTextString(m) }
func (*ConnectionHeader) ProtoMessage()    {}
func (*ConnectionHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_438fa73ead152342, []int{1}
}

func (m *ConnectionHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectionHeader.Unmarshal(m, b)
}
func (m *ConnectionHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectionHeader.Marshal(b, m, deterministic)
}
func (m *ConnectionHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionHeader.Merge(m, src)
}
func (m *ConnectionHeader) XXX_Size() int {
	return xxx_messageInfo_ConnectionHeader.Size(m)
}
func (m *ConnectionHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionHeader proto.InternalMessageInfo

func (m *ConnectionHeader) GetUserInfo() *UserInformation {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *ConnectionHeader) GetServiceName() string {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return ""
}

func (m *ConnectionHeader) GetCellBlockCodecClass() string {
	if m != nil && m.CellBlockCodecClass != nil {
		return *m.CellBlockCodecClass
	}
	return ""
}

func (m *ConnectionHeader) GetCellBlockCompressorClass() string {
	if m != nil && m.CellBlockCompressorClass != nil {
		return *m.CellBlockCompressorClass
	}
	return ""
}

func (m *ConnectionHeader) GetVersionInfo() *VersionInfo {
	if m != nil {
		return m.VersionInfo
	}
	return nil
}

func (m *ConnectionHeader) GetRpcCryptoCipherTransformation() string {
	if m != nil && m.RpcCryptoCipherTransformation != nil {
		return *m.RpcCryptoCipherTransformation
	}
	return ""
}

// This is sent by rpc server to negotiate the data if necessary
type ConnectionHeaderResponse struct {
	// To use Apache Commons Crypto, negotiate the metadata
	CryptoCipherMeta     *CryptoCipherMeta `protobuf:"bytes,1,opt,name=crypto_cipher_meta,json=cryptoCipherMeta" json:"crypto_cipher_meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ConnectionHeaderResponse) Reset()         { *m = ConnectionHeaderResponse{} }
func (m *ConnectionHeaderResponse) String() string { return proto.CompactTextString(m) }
func (*ConnectionHeaderResponse) ProtoMessage()    {}
func (*ConnectionHeaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_438fa73ead152342, []int{2}
}

func (m *ConnectionHeaderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectionHeaderResponse.Unmarshal(m, b)
}
func (m *ConnectionHeaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectionHeaderResponse.Marshal(b, m, deterministic)
}
func (m *ConnectionHeaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionHeaderResponse.Merge(m, src)
}
func (m *ConnectionHeaderResponse) XXX_Size() int {
	return xxx_messageInfo_ConnectionHeaderResponse.Size(m)
}
func (m *ConnectionHeaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionHeaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionHeaderResponse proto.InternalMessageInfo

func (m *ConnectionHeaderResponse) GetCryptoCipherMeta() *CryptoCipherMeta {
	if m != nil {
		return m.CryptoCipherMeta
	}
	return nil
}

// Optional Cell block Message.  Included in client RequestHeader
type CellBlockMeta struct {
	// Length of the following cell block.  Could calculate it but convenient having it too hand.
	Length               *uint32  `protobuf:"varint,1,opt,name=length" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CellBlockMeta) Reset()         { *m = CellBlockMeta{} }
func (m *CellBlockMeta) String() string { return proto.CompactTextString(m) }
func (*CellBlockMeta) ProtoMessage()    {}
func (*CellBlockMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_438fa73ead152342, []int{3}
}

func (m *CellBlockMeta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CellBlockMeta.Unmarshal(m, b)
}
func (m *CellBlockMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CellBlockMeta.Marshal(b, m, deterministic)
}
func (m *CellBlockMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CellBlockMeta.Merge(m, src)
}
func (m *CellBlockMeta) XXX_Size() int {
	return xxx_messageInfo_CellBlockMeta.Size(m)
}
func (m *CellBlockMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_CellBlockMeta.DiscardUnknown(m)
}

var xxx_messageInfo_CellBlockMeta proto.InternalMessageInfo

func (m *CellBlockMeta) GetLength() uint32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

// At the RPC layer, this message is used to carry
// the server side exception to the RPC client.
type ExceptionResponse struct {
	// Class name of the exception thrown from the server
	ExceptionClassName *string `protobuf:"bytes,1,opt,name=exception_class_name,json=exceptionClassName" json:"exception_class_name,omitempty"`
	// Exception stack trace from the server side
	StackTrace *string `protobuf:"bytes,2,opt,name=stack_trace,json=stackTrace" json:"stack_trace,omitempty"`
	// Optional hostname.  Filled in for some exceptions such as region moved
	// where exception gives clue on where the region may have moved.
	Hostname *string `protobuf:"bytes,3,opt,name=hostname" json:"hostname,omitempty"`
	Port     *int32  `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
	// Set if we are NOT to retry on receipt of this exception
	DoNotRetry           *bool    `protobuf:"varint,5,opt,name=do_not_retry,json=doNotRetry" json:"do_not_retry,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExceptionResponse) Reset()         { *m = ExceptionResponse{} }
func (m *ExceptionResponse) String() string { return proto.CompactTextString(m) }
func (*ExceptionResponse) ProtoMessage()    {}
func (*ExceptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_438fa73ead152342, []int{4}
}

func (m *ExceptionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExceptionResponse.Unmarshal(m, b)
}
func (m *ExceptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExceptionResponse.Marshal(b, m, deterministic)
}
func (m *ExceptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExceptionResponse.Merge(m, src)
}
func (m *ExceptionResponse) XXX_Size() int {
	return xxx_messageInfo_ExceptionResponse.Size(m)
}
func (m *ExceptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExceptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExceptionResponse proto.InternalMessageInfo

func (m *ExceptionResponse) GetExceptionClassName() string {
	if m != nil && m.ExceptionClassName != nil {
		return *m.ExceptionClassName
	}
	return ""
}

func (m *ExceptionResponse) GetStackTrace() string {
	if m != nil && m.StackTrace != nil {
		return *m.StackTrace
	}
	return ""
}

func (m *ExceptionResponse) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *ExceptionResponse) GetPort() int32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *ExceptionResponse) GetDoNotRetry() bool {
	if m != nil && m.DoNotRetry != nil {
		return *m.DoNotRetry
	}
	return false
}

//*
// Cipher meta for Crypto
type CryptoCipherMeta struct {
	Transformation       *string  `protobuf:"bytes,1,req,name=transformation" json:"transformation,omitempty"`
	InKey                []byte   `protobuf:"bytes,2,opt,name=inKey" json:"inKey,omitempty"`
	InIv                 []byte   `protobuf:"bytes,3,opt,name=inIv" json:"inIv,omitempty"`
	OutKey               []byte   `protobuf:"bytes,4,opt,name=outKey" json:"outKey,omitempty"`
	OutIv                []byte   `protobuf:"bytes,5,opt,name=outIv" json:"outIv,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CryptoCipherMeta) Reset()         { *m = CryptoCipherMeta{} }
func (m *CryptoCipherMeta) String() string { return proto.CompactTextString(m) }
func (*CryptoCipherMeta) ProtoMessage()    {}
func (*CryptoCipherMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_438fa73ead152342, []int{5}
}

func (m *CryptoCipherMeta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CryptoCipherMeta.Unmarshal(m, b)
}
func (m *CryptoCipherMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CryptoCipherMeta.Marshal(b, m, deterministic)
}
func (m *CryptoCipherMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptoCipherMeta.Merge(m, src)
}
func (m *CryptoCipherMeta) XXX_Size() int {
	return xxx_messageInfo_CryptoCipherMeta.Size(m)
}
func (m *CryptoCipherMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptoCipherMeta.DiscardUnknown(m)
}

var xxx_messageInfo_CryptoCipherMeta proto.InternalMessageInfo

func (m *CryptoCipherMeta) GetTransformation() string {
	if m != nil && m.Transformation != nil {
		return *m.Transformation
	}
	return ""
}

func (m *CryptoCipherMeta) GetInKey() []byte {
	if m != nil {
		return m.InKey
	}
	return nil
}

func (m *CryptoCipherMeta) GetInIv() []byte {
	if m != nil {
		return m.InIv
	}
	return nil
}

func (m *CryptoCipherMeta) GetOutKey() []byte {
	if m != nil {
		return m.OutKey
	}
	return nil
}

func (m *CryptoCipherMeta) GetOutIv() []byte {
	if m != nil {
		return m.OutIv
	}
	return nil
}

// Header sent making a request.
type RequestHeader struct {
	// Monotonically increasing call_id to keep track of RPC requests and their response
	CallId     *uint32   `protobuf:"varint,1,opt,name=call_id,json=callId" json:"call_id,omitempty"`
	TraceInfo  *RPCTInfo `protobuf:"bytes,2,opt,name=trace_info,json=traceInfo" json:"trace_info,omitempty"`
	MethodName *string   `protobuf:"bytes,3,opt,name=method_name,json=methodName" json:"method_name,omitempty"`
	// If true, then a pb Message param follows.
	RequestParam *bool `protobuf:"varint,4,opt,name=request_param,json=requestParam" json:"request_param,omitempty"`
	// If present, then an encoded data block follows.
	CellBlockMeta *CellBlockMeta `protobuf:"bytes,5,opt,name=cell_block_meta,json=cellBlockMeta" json:"cell_block_meta,omitempty"`
	// 0 is NORMAL priority.  200 is HIGH.  If no priority, treat it as NORMAL.
	// See HConstants.
	Priority             *uint32  `protobuf:"varint,6,opt,name=priority" json:"priority,omitempty"`
	Timeout              *uint32  `protobuf:"varint,7,opt,name=timeout" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestHeader) Reset()         { *m = RequestHeader{} }
func (m *RequestHeader) String() string { return proto.CompactTextString(m) }
func (*RequestHeader) ProtoMessage()    {}
func (*RequestHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_438fa73ead152342, []int{6}
}

func (m *RequestHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestHeader.Unmarshal(m, b)
}
func (m *RequestHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestHeader.Marshal(b, m, deterministic)
}
func (m *RequestHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestHeader.Merge(m, src)
}
func (m *RequestHeader) XXX_Size() int {
	return xxx_messageInfo_RequestHeader.Size(m)
}
func (m *RequestHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestHeader.DiscardUnknown(m)
}

var xxx_messageInfo_RequestHeader proto.InternalMessageInfo

func (m *RequestHeader) GetCallId() uint32 {
	if m != nil && m.CallId != nil {
		return *m.CallId
	}
	return 0
}

func (m *RequestHeader) GetTraceInfo() *RPCTInfo {
	if m != nil {
		return m.TraceInfo
	}
	return nil
}

func (m *RequestHeader) GetMethodName() string {
	if m != nil && m.MethodName != nil {
		return *m.MethodName
	}
	return ""
}

func (m *RequestHeader) GetRequestParam() bool {
	if m != nil && m.RequestParam != nil {
		return *m.RequestParam
	}
	return false
}

func (m *RequestHeader) GetCellBlockMeta() *CellBlockMeta {
	if m != nil {
		return m.CellBlockMeta
	}
	return nil
}

func (m *RequestHeader) GetPriority() uint32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

func (m *RequestHeader) GetTimeout() uint32 {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return 0
}

type ResponseHeader struct {
	CallId *uint32 `protobuf:"varint,1,opt,name=call_id,json=callId" json:"call_id,omitempty"`
	// If present, then request threw an exception and no response message (else we presume one)
	Exception *ExceptionResponse `protobuf:"bytes,2,opt,name=exception" json:"exception,omitempty"`
	// If present, then an encoded data block follows.
	CellBlockMeta        *CellBlockMeta `protobuf:"bytes,3,opt,name=cell_block_meta,json=cellBlockMeta" json:"cell_block_meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ResponseHeader) Reset()         { *m = ResponseHeader{} }
func (m *ResponseHeader) String() string { return proto.CompactTextString(m) }
func (*ResponseHeader) ProtoMessage()    {}
func (*ResponseHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_438fa73ead152342, []int{7}
}

func (m *ResponseHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseHeader.Unmarshal(m, b)
}
func (m *ResponseHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseHeader.Marshal(b, m, deterministic)
}
func (m *ResponseHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseHeader.Merge(m, src)
}
func (m *ResponseHeader) XXX_Size() int {
	return xxx_messageInfo_ResponseHeader.Size(m)
}
func (m *ResponseHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseHeader proto.InternalMessageInfo

func (m *ResponseHeader) GetCallId() uint32 {
	if m != nil && m.CallId != nil {
		return *m.CallId
	}
	return 0
}

func (m *ResponseHeader) GetException() *ExceptionResponse {
	if m != nil {
		return m.Exception
	}
	return nil
}

func (m *ResponseHeader) GetCellBlockMeta() *CellBlockMeta {
	if m != nil {
		return m.CellBlockMeta
	}
	return nil
}

func init() {
	proto.RegisterType((*UserInformation)(nil), "hbase.pb.UserInformation")
	proto.RegisterType((*ConnectionHeader)(nil), "hbase.pb.ConnectionHeader")
	proto.RegisterType((*ConnectionHeaderResponse)(nil), "hbase.pb.ConnectionHeaderResponse")
	proto.RegisterType((*CellBlockMeta)(nil), "hbase.pb.CellBlockMeta")
	proto.RegisterType((*ExceptionResponse)(nil), "hbase.pb.ExceptionResponse")
	proto.RegisterType((*CryptoCipherMeta)(nil), "hbase.pb.CryptoCipherMeta")
	proto.RegisterType((*RequestHeader)(nil), "hbase.pb.RequestHeader")
	proto.RegisterType((*ResponseHeader)(nil), "hbase.pb.ResponseHeader")
}

func init() { proto.RegisterFile("RPC.proto", fileDescriptor_438fa73ead152342) }

var fileDescriptor_438fa73ead152342 = []byte{
	// 744 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xe4, 0x44,
	0x10, 0x96, 0x67, 0x93, 0xcd, 0x4c, 0xcd, 0x38, 0x1b, 0x9a, 0x65, 0xd7, 0x4c, 0x84, 0x76, 0x30,
	0x02, 0x72, 0x1a, 0xb1, 0x20, 0x21, 0x38, 0x20, 0xa4, 0x58, 0x88, 0x44, 0x88, 0x55, 0xd4, 0xca,
	0x72, 0xb5, 0x3a, 0xed, 0x9a, 0xb1, 0x15, 0xbb, 0xdb, 0x74, 0xf7, 0x8c, 0x98, 0xd7, 0xe0, 0xc4,
	0x91, 0x0b, 0xef, 0xc0, 0x03, 0xf1, 0x20, 0xa8, 0xab, 0xed, 0xf9, 0x03, 0x09, 0x71, 0x73, 0x7d,
	0x55, 0xd5, 0x5d, 0xf5, 0x7d, 0x5f, 0x1b, 0x46, 0xfc, 0x2e, 0x9b, 0xb7, 0x46, 0x3b, 0xcd, 0x86,
	0xe5, 0x83, 0xb0, 0x38, 0x6f, 0x1f, 0xa6, 0xf1, 0xbd, 0x11, 0xb2, 0x52, 0xcb, 0x90, 0x98, 0x8e,
	0x6f, 0xae, 0x29, 0xe1, 0x83, 0xf4, 0x2d, 0x3c, 0x7b, 0x6b, 0xd1, 0xdc, 0xaa, 0x85, 0x36, 0x8d,
	0x70, 0x95, 0x56, 0xec, 0x63, 0x38, 0xc7, 0xc5, 0x02, 0xa5, 0xab, 0xd6, 0x98, 0xaf, 0x2c, 0x9a,
	0x24, 0x9a, 0x0d, 0xae, 0x46, 0x3c, 0xde, 0xa2, 0xbe, 0x83, 0x5d, 0xc2, 0xc8, 0xa0, 0xa8, 0x43,
	0xc5, 0x60, 0x16, 0x5d, 0x8d, 0xf8, 0xd0, 0x03, 0x3e, 0x99, 0xfe, 0x35, 0x80, 0x8b, 0x4c, 0x2b,
	0xe5, 0xeb, 0xb5, 0xba, 0x41, 0x51, 0xa0, 0x61, 0x5f, 0xc2, 0xc8, 0x17, 0xe7, 0x95, 0x5a, 0xe8,
	0x24, 0x9a, 0x45, 0x57, 0xe3, 0xcf, 0xdf, 0x9f, 0xf7, 0x53, 0xce, 0x8f, 0xc6, 0xe0, 0xc3, 0x55,
	0x07, 0xb0, 0x0f, 0x61, 0x62, 0xd1, 0xac, 0x2b, 0x89, 0xb9, 0x12, 0x0d, 0x76, 0x97, 0x8d, 0x3b,
	0xec, 0x8d, 0x68, 0x90, 0x7d, 0x01, 0x2f, 0x24, 0xd6, 0x75, 0xfe, 0x50, 0x6b, 0xf9, 0x98, 0x4b,
	0x5d, 0xa0, 0xcc, 0x65, 0x2d, 0xac, 0x4d, 0x9e, 0x50, 0xf1, 0xbb, 0x3e, 0x7b, 0xed, 0x93, 0x99,
	0xcf, 0x65, 0x3e, 0xc5, 0xbe, 0x81, 0xcb, 0x83, 0xa6, 0xa6, 0x35, 0x68, 0xad, 0x36, 0x5d, 0xe7,
	0x09, 0x75, 0x26, 0x7b, 0x9d, 0x7d, 0x41, 0x68, 0xff, 0x0a, 0x26, 0x6b, 0x34, 0xb6, 0xd2, 0x2a,
	0x6c, 0x74, 0x4a, 0x1b, 0xbd, 0xb7, 0xdb, 0xe8, 0xa7, 0x90, 0xf5, 0x3b, 0xf0, 0xf1, 0x7a, 0x17,
	0xb0, 0xef, 0x61, 0x66, 0x5a, 0x99, 0x4b, 0xb3, 0x69, 0x9d, 0xce, 0x65, 0xd5, 0x96, 0x68, 0x72,
	0x67, 0x84, 0xb2, 0xdb, 0xf5, 0x93, 0xa7, 0x74, 0xfb, 0x07, 0xa6, 0x95, 0x19, 0x95, 0x65, 0x54,
	0x75, 0x7f, 0x50, 0x94, 0x16, 0x90, 0x1c, 0xb3, 0xcc, 0xd1, 0xb6, 0x5a, 0x59, 0x64, 0x37, 0xc0,
	0x0e, 0x2f, 0x68, 0xd0, 0x89, 0x8e, 0xf6, 0xe9, 0x6e, 0xc8, 0xfd, 0xd3, 0x7f, 0x44, 0x27, 0xf8,
	0x85, 0x3c, 0x42, 0xd2, 0x4f, 0x21, 0xce, 0x7a, 0x12, 0x3c, 0xc0, 0x5e, 0xc0, 0xd3, 0x1a, 0xd5,
	0xd2, 0x95, 0x74, 0x5c, 0xcc, 0xbb, 0x28, 0xfd, 0x33, 0x82, 0x77, 0xbe, 0xfb, 0x45, 0x62, 0x4b,
	0x02, 0xf6, 0x83, 0x7c, 0x06, 0xcf, 0xb1, 0x07, 0x03, 0xb5, 0x41, 0xc6, 0x88, 0x36, 0x64, 0xdb,
	0x1c, 0xb1, 0x4a, 0x6a, 0xbe, 0x82, 0xb1, 0x75, 0x42, 0x3e, 0x7a, 0x4e, 0x64, 0xaf, 0x37, 0x10,
	0xe4, 0xad, 0x8c, 0x6c, 0x0a, 0xc3, 0x52, 0x5b, 0x47, 0xc7, 0x04, 0x81, 0xb7, 0x31, 0x63, 0x70,
	0xd2, 0x6a, 0xe3, 0x48, 0xbe, 0x53, 0x4e, 0xdf, 0x6c, 0x06, 0x93, 0x42, 0xe7, 0x4a, 0xbb, 0xdc,
	0xa0, 0x33, 0x1b, 0x92, 0x6a, 0xc8, 0xa1, 0xd0, 0x6f, 0xb4, 0xe3, 0x1e, 0x49, 0x7f, 0x8d, 0xe0,
	0xe2, 0x98, 0x0a, 0xf6, 0x09, 0x9c, 0x1f, 0xa9, 0x12, 0x5e, 0xc2, 0x11, 0xca, 0x9e, 0xc3, 0x69,
	0xa5, 0x7e, 0xc0, 0x0d, 0x4d, 0x3a, 0xe1, 0x21, 0xf0, 0x83, 0x54, 0xea, 0x76, 0x4d, 0x03, 0x4e,
	0x38, 0x7d, 0x7b, 0xe6, 0xf4, 0xca, 0xf9, 0xd2, 0x13, 0x42, 0xbb, 0xc8, 0x9f, 0xa0, 0x57, 0xee,
	0x76, 0x4d, 0x93, 0x4d, 0x78, 0x08, 0xd2, 0xdf, 0x06, 0x10, 0x73, 0xfc, 0x79, 0x85, 0xd6, 0x75,
	0x4f, 0xe8, 0x25, 0x9c, 0x49, 0x51, 0xd7, 0x79, 0x55, 0xf4, 0xd4, 0xfb, 0xf0, 0xb6, 0x60, 0xaf,
	0x01, 0x88, 0xac, 0x60, 0xc5, 0x01, 0xa9, 0xcc, 0x76, 0x2a, 0xf3, 0xbb, 0xec, 0x9e, 0x7c, 0x38,
	0xa2, 0x2a, 0x72, 0xe1, 0x2b, 0x18, 0x37, 0xe8, 0x4a, 0x5d, 0xe4, 0x7b, 0x3c, 0x42, 0x80, 0x48,
	0x86, 0x8f, 0x20, 0x36, 0xe1, 0xf6, 0xbc, 0x15, 0x46, 0x34, 0x34, 0xf3, 0x90, 0x4f, 0x3a, 0xf0,
	0xce, 0x63, 0xec, 0x5b, 0x78, 0xb6, 0xf7, 0x88, 0xc8, 0x63, 0xe1, 0x21, 0xbc, 0xdc, 0xf3, 0xd8,
	0xbe, 0x7b, 0x78, 0x2c, 0x0f, 0xcc, 0x34, 0x85, 0x61, 0x6b, 0x2a, 0x6d, 0x2a, 0xb7, 0x21, 0xd3,
	0xc7, 0x7c, 0x1b, 0xb3, 0x04, 0xce, 0x5c, 0xd5, 0xa0, 0x5e, 0xb9, 0xe4, 0x8c, 0x52, 0x7d, 0x98,
	0xfe, 0x11, 0xc1, 0x79, 0xef, 0xb0, 0xff, 0xe2, 0xe6, 0x6b, 0x18, 0x6d, 0x4d, 0xd6, 0x51, 0x73,
	0xb9, 0x1b, 0xee, 0x1f, 0x86, 0xe5, 0xbb, 0xea, 0x7f, 0xdb, 0xee, 0xc9, 0xff, 0xd9, 0xee, 0x3a,
	0x83, 0xd7, 0xda, 0x2c, 0xe7, 0xa2, 0x15, 0xb2, 0xc4, 0x79, 0x29, 0x0a, 0xad, 0xdb, 0xae, 0xd5,
	0x96, 0xa2, 0xc0, 0x22, 0xfc, 0x87, 0x1f, 0x56, 0x8b, 0xf9, 0x12, 0x15, 0x1a, 0xe1, 0xb0, 0xb8,
	0xf6, 0x7f, 0xf1, 0x3b, 0x0f, 0xdb, 0x9b, 0xe8, 0xf7, 0x28, 0xfa, 0x3b, 0x00, 0x00, 0xff, 0xff,
	0x02, 0x62, 0x42, 0x64, 0xd6, 0x05, 0x00, 0x00,
}
