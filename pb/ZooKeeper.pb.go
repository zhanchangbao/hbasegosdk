// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ZooKeeper.proto

// ZNode data in hbase are serialized protobufs with a four byte
// 'magic' 'PBUF' prefix.

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SplitLogTask_State int32

const (
	SplitLogTask_UNASSIGNED SplitLogTask_State = 0
	SplitLogTask_OWNED      SplitLogTask_State = 1
	SplitLogTask_RESIGNED   SplitLogTask_State = 2
	SplitLogTask_DONE       SplitLogTask_State = 3
	SplitLogTask_ERR        SplitLogTask_State = 4
)

var SplitLogTask_State_name = map[int32]string{
	0: "UNASSIGNED",
	1: "OWNED",
	2: "RESIGNED",
	3: "DONE",
	4: "ERR",
}

var SplitLogTask_State_value = map[string]int32{
	"UNASSIGNED": 0,
	"OWNED":      1,
	"RESIGNED":   2,
	"DONE":       3,
	"ERR":        4,
}

func (x SplitLogTask_State) Enum() *SplitLogTask_State {
	p := new(SplitLogTask_State)
	*p = x
	return p
}

func (x SplitLogTask_State) String() string {
	return proto.EnumName(SplitLogTask_State_name, int32(x))
}

func (x *SplitLogTask_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SplitLogTask_State_value, data, "SplitLogTask_State")
	if err != nil {
		return err
	}
	*x = SplitLogTask_State(value)
	return nil
}

func (SplitLogTask_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3820796336f730e, []int{3, 0}
}

// Table's current state
type DeprecatedTableState_State int32

const (
	DeprecatedTableState_ENABLED   DeprecatedTableState_State = 0
	DeprecatedTableState_DISABLED  DeprecatedTableState_State = 1
	DeprecatedTableState_DISABLING DeprecatedTableState_State = 2
	DeprecatedTableState_ENABLING  DeprecatedTableState_State = 3
)

var DeprecatedTableState_State_name = map[int32]string{
	0: "ENABLED",
	1: "DISABLED",
	2: "DISABLING",
	3: "ENABLING",
}

var DeprecatedTableState_State_value = map[string]int32{
	"ENABLED":   0,
	"DISABLED":  1,
	"DISABLING": 2,
	"ENABLING":  3,
}

func (x DeprecatedTableState_State) Enum() *DeprecatedTableState_State {
	p := new(DeprecatedTableState_State)
	*p = x
	return p
}

func (x DeprecatedTableState_State) String() string {
	return proto.EnumName(DeprecatedTableState_State_name, int32(x))
}

func (x *DeprecatedTableState_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeprecatedTableState_State_value, data, "DeprecatedTableState_State")
	if err != nil {
		return err
	}
	*x = DeprecatedTableState_State(value)
	return nil
}

func (DeprecatedTableState_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3820796336f730e, []int{4, 0}
}

//*
// Content of the meta-region-server znode.
type MetaRegionServer struct {
	// The ServerName hosting the meta region currently, or destination server,
	// if meta region is in transition.
	Server *ServerName `protobuf:"bytes,1,req,name=server" json:"server,omitempty"`
	// The major version of the rpc the server speaks.  This is used so that
	// clients connecting to the cluster can have prior knowledge of what version
	// to send to a RegionServer.  AsyncHBase will use this to detect versions.
	RpcVersion *uint32 `protobuf:"varint,2,opt,name=rpc_version,json=rpcVersion" json:"rpc_version,omitempty"`
	// State of the region transition. OPEN means fully operational 'hbase:meta'
	State                *RegionState_State `protobuf:"varint,3,opt,name=state,enum=hbase.pb.RegionState_State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MetaRegionServer) Reset()         { *m = MetaRegionServer{} }
func (m *MetaRegionServer) String() string { return proto.CompactTextString(m) }
func (*MetaRegionServer) ProtoMessage()    {}
func (*MetaRegionServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3820796336f730e, []int{0}
}

func (m *MetaRegionServer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaRegionServer.Unmarshal(m, b)
}
func (m *MetaRegionServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaRegionServer.Marshal(b, m, deterministic)
}
func (m *MetaRegionServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaRegionServer.Merge(m, src)
}
func (m *MetaRegionServer) XXX_Size() int {
	return xxx_messageInfo_MetaRegionServer.Size(m)
}
func (m *MetaRegionServer) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaRegionServer.DiscardUnknown(m)
}

var xxx_messageInfo_MetaRegionServer proto.InternalMessageInfo

func (m *MetaRegionServer) GetServer() *ServerName {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *MetaRegionServer) GetRpcVersion() uint32 {
	if m != nil && m.RpcVersion != nil {
		return *m.RpcVersion
	}
	return 0
}

func (m *MetaRegionServer) GetState() RegionState_State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return RegionState_OFFLINE
}

//*
// Content of the master znode.
type Master struct {
	// The ServerName of the current Master
	Master *ServerName `protobuf:"bytes,1,req,name=master" json:"master,omitempty"`
	// Major RPC version so that clients can know what version the master can accept.
	RpcVersion           *uint32  `protobuf:"varint,2,opt,name=rpc_version,json=rpcVersion" json:"rpc_version,omitempty"`
	InfoPort             *uint32  `protobuf:"varint,3,opt,name=info_port,json=infoPort" json:"info_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Master) Reset()         { *m = Master{} }
func (m *Master) String() string { return proto.CompactTextString(m) }
func (*Master) ProtoMessage()    {}
func (*Master) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3820796336f730e, []int{1}
}

func (m *Master) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Master.Unmarshal(m, b)
}
func (m *Master) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Master.Marshal(b, m, deterministic)
}
func (m *Master) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Master.Merge(m, src)
}
func (m *Master) XXX_Size() int {
	return xxx_messageInfo_Master.Size(m)
}
func (m *Master) XXX_DiscardUnknown() {
	xxx_messageInfo_Master.DiscardUnknown(m)
}

var xxx_messageInfo_Master proto.InternalMessageInfo

func (m *Master) GetMaster() *ServerName {
	if m != nil {
		return m.Master
	}
	return nil
}

func (m *Master) GetRpcVersion() uint32 {
	if m != nil && m.RpcVersion != nil {
		return *m.RpcVersion
	}
	return 0
}

func (m *Master) GetInfoPort() uint32 {
	if m != nil && m.InfoPort != nil {
		return *m.InfoPort
	}
	return 0
}

//*
// Content of the '/hbase/running', cluster state, znode.
type ClusterUp struct {
	// If this znode is present, cluster is up.  Currently
	// the data is cluster start_date.
	StartDate            *string  `protobuf:"bytes,1,req,name=start_date,json=startDate" json:"start_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterUp) Reset()         { *m = ClusterUp{} }
func (m *ClusterUp) String() string { return proto.CompactTextString(m) }
func (*ClusterUp) ProtoMessage()    {}
func (*ClusterUp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3820796336f730e, []int{2}
}

func (m *ClusterUp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterUp.Unmarshal(m, b)
}
func (m *ClusterUp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterUp.Marshal(b, m, deterministic)
}
func (m *ClusterUp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterUp.Merge(m, src)
}
func (m *ClusterUp) XXX_Size() int {
	return xxx_messageInfo_ClusterUp.Size(m)
}
func (m *ClusterUp) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterUp.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterUp proto.InternalMessageInfo

func (m *ClusterUp) GetStartDate() string {
	if m != nil && m.StartDate != nil {
		return *m.StartDate
	}
	return ""
}

//*
// WAL SplitLog directory znodes have this for content.  Used doing distributed
// WAL splitting.  Holds current state and name of server that originated split.
type SplitLogTask struct {
	State                *SplitLogTask_State `protobuf:"varint,1,req,name=state,enum=hbase.pb.SplitLogTask_State" json:"state,omitempty"`
	ServerName           *ServerName         `protobuf:"bytes,2,req,name=server_name,json=serverName" json:"server_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SplitLogTask) Reset()         { *m = SplitLogTask{} }
func (m *SplitLogTask) String() string { return proto.CompactTextString(m) }
func (*SplitLogTask) ProtoMessage()    {}
func (*SplitLogTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3820796336f730e, []int{3}
}

func (m *SplitLogTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SplitLogTask.Unmarshal(m, b)
}
func (m *SplitLogTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SplitLogTask.Marshal(b, m, deterministic)
}
func (m *SplitLogTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplitLogTask.Merge(m, src)
}
func (m *SplitLogTask) XXX_Size() int {
	return xxx_messageInfo_SplitLogTask.Size(m)
}
func (m *SplitLogTask) XXX_DiscardUnknown() {
	xxx_messageInfo_SplitLogTask.DiscardUnknown(m)
}

var xxx_messageInfo_SplitLogTask proto.InternalMessageInfo

func (m *SplitLogTask) GetState() SplitLogTask_State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return SplitLogTask_UNASSIGNED
}

func (m *SplitLogTask) GetServerName() *ServerName {
	if m != nil {
		return m.ServerName
	}
	return nil
}

//*
// The znode that holds state of table.
// Deprected, table state is stored in hbase:meta since 2.0.0.
type DeprecatedTableState struct {
	// This is the table's state.  If no znode for a table,
	// its state is presumed enabled.  See o.a.h.h.zookeeper.ZKTable class
	// for more.
	State                *DeprecatedTableState_State `protobuf:"varint,1,req,name=state,enum=hbase.pb.DeprecatedTableState_State,def=0" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *DeprecatedTableState) Reset()         { *m = DeprecatedTableState{} }
func (m *DeprecatedTableState) String() string { return proto.CompactTextString(m) }
func (*DeprecatedTableState) ProtoMessage()    {}
func (*DeprecatedTableState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3820796336f730e, []int{4}
}

func (m *DeprecatedTableState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeprecatedTableState.Unmarshal(m, b)
}
func (m *DeprecatedTableState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeprecatedTableState.Marshal(b, m, deterministic)
}
func (m *DeprecatedTableState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeprecatedTableState.Merge(m, src)
}
func (m *DeprecatedTableState) XXX_Size() int {
	return xxx_messageInfo_DeprecatedTableState.Size(m)
}
func (m *DeprecatedTableState) XXX_DiscardUnknown() {
	xxx_messageInfo_DeprecatedTableState.DiscardUnknown(m)
}

var xxx_messageInfo_DeprecatedTableState proto.InternalMessageInfo

const Default_DeprecatedTableState_State DeprecatedTableState_State = DeprecatedTableState_ENABLED

func (m *DeprecatedTableState) GetState() DeprecatedTableState_State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_DeprecatedTableState_State
}

//*
// State of the switch.
type SwitchState struct {
	Enabled              *bool    `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SwitchState) Reset()         { *m = SwitchState{} }
func (m *SwitchState) String() string { return proto.CompactTextString(m) }
func (*SwitchState) ProtoMessage()    {}
func (*SwitchState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3820796336f730e, []int{5}
}

func (m *SwitchState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SwitchState.Unmarshal(m, b)
}
func (m *SwitchState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SwitchState.Marshal(b, m, deterministic)
}
func (m *SwitchState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwitchState.Merge(m, src)
}
func (m *SwitchState) XXX_Size() int {
	return xxx_messageInfo_SwitchState.Size(m)
}
func (m *SwitchState) XXX_DiscardUnknown() {
	xxx_messageInfo_SwitchState.DiscardUnknown(m)
}

var xxx_messageInfo_SwitchState proto.InternalMessageInfo

func (m *SwitchState) GetEnabled() bool {
	if m != nil && m.Enabled != nil {
		return *m.Enabled
	}
	return false
}

func init() {
	proto.RegisterEnum("hbase.pb.SplitLogTask_State", SplitLogTask_State_name, SplitLogTask_State_value)
	proto.RegisterEnum("hbase.pb.DeprecatedTableState_State", DeprecatedTableState_State_name, DeprecatedTableState_State_value)
	proto.RegisterType((*MetaRegionServer)(nil), "hbase.pb.MetaRegionServer")
	proto.RegisterType((*Master)(nil), "hbase.pb.Master")
	proto.RegisterType((*ClusterUp)(nil), "hbase.pb.ClusterUp")
	proto.RegisterType((*SplitLogTask)(nil), "hbase.pb.SplitLogTask")
	proto.RegisterType((*DeprecatedTableState)(nil), "hbase.pb.DeprecatedTableState")
	proto.RegisterType((*SwitchState)(nil), "hbase.pb.SwitchState")
}

func init() { proto.RegisterFile("ZooKeeper.proto", fileDescriptor_d3820796336f730e) }

var fileDescriptor_d3820796336f730e = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xcf, 0x6a, 0xdb, 0x4c,
	0x14, 0xc5, 0x33, 0x76, 0x1c, 0x5b, 0x57, 0xb1, 0x3f, 0x31, 0x5f, 0x16, 0x22, 0x69, 0xa9, 0x11,
	0x85, 0x9a, 0x52, 0x04, 0x31, 0x74, 0xd3, 0x4d, 0x89, 0x2d, 0x91, 0x98, 0x3a, 0x4a, 0x90, 0x92,
	0x16, 0xba, 0x31, 0x63, 0xeb, 0xc6, 0x36, 0xb5, 0x35, 0xc3, 0xcc, 0x38, 0x7d, 0x85, 0x3e, 0x40,
	0x97, 0x5d, 0xf4, 0x49, 0xfa, 0x6c, 0x65, 0x34, 0x56, 0x9d, 0x40, 0x49, 0x37, 0xe2, 0xfe, 0x39,
	0x9c, 0xf9, 0x9d, 0x91, 0x04, 0xff, 0x7d, 0xe6, 0xfc, 0x03, 0xa2, 0x40, 0x19, 0x0a, 0xc9, 0x35,
	0xa7, 0xad, 0xc5, 0x94, 0x29, 0x0c, 0xc5, 0xf4, 0xd8, 0xbd, 0x18, 0x94, 0x95, 0x19, 0x1f, 0xff,
	0x3f, 0x5c, 0x6d, 0x94, 0x46, 0x99, 0x69, 0xa6, 0x37, 0xca, 0x0e, 0x83, 0xef, 0x04, 0xbc, 0x4b,
	0xd4, 0x2c, 0xc5, 0xf9, 0x92, 0x17, 0x19, 0xca, 0x7b, 0x94, 0xf4, 0x0d, 0x1c, 0xa8, 0xb2, 0xf2,
	0x49, 0xb7, 0xd6, 0x73, 0xfb, 0x47, 0x61, 0xe5, 0x18, 0x5a, 0x45, 0xc2, 0xd6, 0x98, 0x6e, 0x35,
	0xf4, 0x05, 0xb8, 0x52, 0xcc, 0x26, 0xf7, 0x28, 0xd5, 0x92, 0x17, 0x7e, 0xad, 0x4b, 0x7a, 0xed,
	0x14, 0xa4, 0x98, 0x7d, 0xb4, 0x13, 0x7a, 0x0a, 0x0d, 0xa5, 0x99, 0x46, 0xbf, 0xde, 0x25, 0xbd,
	0x4e, 0xff, 0x64, 0xe7, 0xb6, 0x3d, 0xd5, 0x2c, 0xc3, 0xf2, 0x99, 0x5a, 0x65, 0xa0, 0xe1, 0xe0,
	0x92, 0x19, 0x58, 0xc3, 0xb2, 0x2e, 0xab, 0xa7, 0x59, 0xac, 0xe6, 0xdf, 0x2c, 0x27, 0xe0, 0x2c,
	0x8b, 0x3b, 0x3e, 0x11, 0x5c, 0xea, 0x92, 0xa7, 0x9d, 0xb6, 0xcc, 0xe0, 0x9a, 0x4b, 0x1d, 0xbc,
	0x06, 0x67, 0x7b, 0x47, 0xb7, 0x82, 0x3e, 0x07, 0x50, 0x9a, 0x49, 0x3d, 0xc9, 0x0d, 0xba, 0x39,
	0xdc, 0x49, 0x9d, 0x72, 0x12, 0x19, 0xc2, 0x5f, 0x04, 0x0e, 0x33, 0xb1, 0x5a, 0xea, 0x31, 0x9f,
	0xdf, 0x30, 0xf5, 0x85, 0xf6, 0xab, 0x94, 0x46, 0xda, 0xe9, 0x3f, 0x7b, 0xc0, 0xf9, 0x40, 0xf6,
	0x28, 0x26, 0x7d, 0x0b, 0xae, 0xbd, 0xc4, 0x49, 0xc1, 0xd6, 0xe8, 0xd7, 0x9e, 0x48, 0x08, 0xea,
	0x4f, 0x1d, 0x0c, 0xa1, 0x51, 0xda, 0xd0, 0x0e, 0xc0, 0x6d, 0x72, 0x96, 0x65, 0xa3, 0xf3, 0x24,
	0x8e, 0xbc, 0x3d, 0xea, 0x40, 0xe3, 0xea, 0x93, 0x29, 0x09, 0x3d, 0x84, 0x56, 0x1a, 0x6f, 0x17,
	0x35, 0xda, 0x82, 0xfd, 0xe8, 0x2a, 0x89, 0xbd, 0x3a, 0x6d, 0x42, 0x3d, 0x4e, 0x53, 0x6f, 0x3f,
	0xf8, 0x41, 0xe0, 0x28, 0x42, 0x21, 0x71, 0xc6, 0x34, 0xe6, 0x37, 0x6c, 0xba, 0x42, 0x6b, 0x3a,
	0x7c, 0x1c, 0xe4, 0xe5, 0x0e, 0xe7, 0x6f, 0x72, 0x1b, 0xe8, 0x5d, 0x33, 0x4e, 0xce, 0x06, 0xe3,
	0x38, 0xaa, 0x5e, 0xe0, 0xfb, 0x0a, 0xd1, 0x85, 0x6a, 0xe5, 0xed, 0x19, 0xa8, 0x68, 0x94, 0xd9,
	0x8e, 0xd0, 0x36, 0x38, 0xb6, 0x1b, 0x25, 0xe7, 0x5e, 0xcd, 0x2c, 0x4b, 0xa5, 0xe9, 0xea, 0xc1,
	0x2b, 0x70, 0xb3, 0xaf, 0x4b, 0x3d, 0x5b, 0x58, 0x1b, 0x1f, 0x9a, 0x58, 0x98, 0x43, 0x73, 0x9f,
	0x74, 0x49, 0xaf, 0x95, 0x56, 0xed, 0x60, 0x0c, 0xa7, 0x5c, 0xce, 0x43, 0x26, 0xd8, 0x6c, 0x81,
	0xe1, 0x82, 0xe5, 0x9c, 0x8b, 0x2d, 0xb2, 0x5a, 0xb0, 0x1c, 0x73, 0xfb, 0xa5, 0x4f, 0x37, 0x77,
	0xe1, 0x1c, 0x0b, 0x94, 0x06, 0x7f, 0xb0, 0xfb, 0x67, 0xae, 0xcd, 0x52, 0x5d, 0x90, 0x6f, 0x84,
	0xfc, 0x24, 0xe4, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x39, 0xdf, 0xe3, 0x4d, 0x03, 0x00,
	0x00,
}
