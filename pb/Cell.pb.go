// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Cell.proto

// Cell and KeyValue protos

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//*
// The type of the key in a Cell
type CellType int32

const (
	CellType_MINIMUM               CellType = 0
	CellType_PUT                   CellType = 4
	CellType_DELETE                CellType = 8
	CellType_DELETE_FAMILY_VERSION CellType = 10
	CellType_DELETE_COLUMN         CellType = 12
	CellType_DELETE_FAMILY         CellType = 14
	// MAXIMUM is used when searching; you look from maximum on down.
	CellType_MAXIMUM CellType = 255
)

var CellType_name = map[int32]string{
	0:   "MINIMUM",
	4:   "PUT",
	8:   "DELETE",
	10:  "DELETE_FAMILY_VERSION",
	12:  "DELETE_COLUMN",
	14:  "DELETE_FAMILY",
	255: "MAXIMUM",
}

var CellType_value = map[string]int32{
	"MINIMUM":               0,
	"PUT":                   4,
	"DELETE":                8,
	"DELETE_FAMILY_VERSION": 10,
	"DELETE_COLUMN":         12,
	"DELETE_FAMILY":         14,
	"MAXIMUM":               255,
}

func (x CellType) Enum() *CellType {
	p := new(CellType)
	*p = x
	return p
}

func (x CellType) String() string {
	return proto.EnumName(CellType_name, int32(x))
}

func (x *CellType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CellType_value, data, "CellType")
	if err != nil {
		return err
	}
	*x = CellType(value)
	return nil
}

func (CellType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bdf52b544917e2ef, []int{0}
}

//*
// Protocol buffer version of Cell.
type Cell struct {
	Row                  []byte    `protobuf:"bytes,1,opt,name=row" json:"row,omitempty"`
	Family               []byte    `protobuf:"bytes,2,opt,name=family" json:"family,omitempty"`
	Qualifier            []byte    `protobuf:"bytes,3,opt,name=qualifier" json:"qualifier,omitempty"`
	Timestamp            *uint64   `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	CellType             *CellType `protobuf:"varint,5,opt,name=cell_type,json=cellType,enum=hbase.pb.CellType" json:"cell_type,omitempty"`
	Value                []byte    `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`
	Tags                 []byte    `protobuf:"bytes,7,opt,name=tags" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Cell) Reset()         { *m = Cell{} }
func (m *Cell) String() string { return proto.CompactTextString(m) }
func (*Cell) ProtoMessage()    {}
func (*Cell) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdf52b544917e2ef, []int{0}
}

func (m *Cell) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cell.Unmarshal(m, b)
}
func (m *Cell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cell.Marshal(b, m, deterministic)
}
func (m *Cell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cell.Merge(m, src)
}
func (m *Cell) XXX_Size() int {
	return xxx_messageInfo_Cell.Size(m)
}
func (m *Cell) XXX_DiscardUnknown() {
	xxx_messageInfo_Cell.DiscardUnknown(m)
}

var xxx_messageInfo_Cell proto.InternalMessageInfo

func (m *Cell) GetRow() []byte {
	if m != nil {
		return m.Row
	}
	return nil
}

func (m *Cell) GetFamily() []byte {
	if m != nil {
		return m.Family
	}
	return nil
}

func (m *Cell) GetQualifier() []byte {
	if m != nil {
		return m.Qualifier
	}
	return nil
}

func (m *Cell) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *Cell) GetCellType() CellType {
	if m != nil && m.CellType != nil {
		return *m.CellType
	}
	return CellType_MINIMUM
}

func (m *Cell) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Cell) GetTags() []byte {
	if m != nil {
		return m.Tags
	}
	return nil
}

//*
// Protocol buffer version of KeyValue.
// It doesn't have those transient parameters
type KeyValue struct {
	Row                  []byte    `protobuf:"bytes,1,req,name=row" json:"row,omitempty"`
	Family               []byte    `protobuf:"bytes,2,req,name=family" json:"family,omitempty"`
	Qualifier            []byte    `protobuf:"bytes,3,req,name=qualifier" json:"qualifier,omitempty"`
	Timestamp            *uint64   `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	KeyType              *CellType `protobuf:"varint,5,opt,name=key_type,json=keyType,enum=hbase.pb.CellType" json:"key_type,omitempty"`
	Value                []byte    `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`
	Tags                 []byte    `protobuf:"bytes,7,opt,name=tags" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *KeyValue) Reset()         { *m = KeyValue{} }
func (m *KeyValue) String() string { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()    {}
func (*KeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdf52b544917e2ef, []int{1}
}

func (m *KeyValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyValue.Unmarshal(m, b)
}
func (m *KeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyValue.Marshal(b, m, deterministic)
}
func (m *KeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValue.Merge(m, src)
}
func (m *KeyValue) XXX_Size() int {
	return xxx_messageInfo_KeyValue.Size(m)
}
func (m *KeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValue proto.InternalMessageInfo

func (m *KeyValue) GetRow() []byte {
	if m != nil {
		return m.Row
	}
	return nil
}

func (m *KeyValue) GetFamily() []byte {
	if m != nil {
		return m.Family
	}
	return nil
}

func (m *KeyValue) GetQualifier() []byte {
	if m != nil {
		return m.Qualifier
	}
	return nil
}

func (m *KeyValue) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *KeyValue) GetKeyType() CellType {
	if m != nil && m.KeyType != nil {
		return *m.KeyType
	}
	return CellType_MINIMUM
}

func (m *KeyValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *KeyValue) GetTags() []byte {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterEnum("hbase.pb.CellType", CellType_name, CellType_value)
	proto.RegisterType((*Cell)(nil), "hbase.pb.Cell")
	proto.RegisterType((*KeyValue)(nil), "hbase.pb.KeyValue")
}

func init() { proto.RegisterFile("Cell.proto", fileDescriptor_bdf52b544917e2ef) }

var fileDescriptor_bdf52b544917e2ef = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcf, 0x4e, 0xf2, 0x50,
	0x10, 0xc5, 0xbf, 0x5b, 0x0a, 0x2d, 0xf3, 0x21, 0xa9, 0x37, 0x6a, 0x6a, 0xe2, 0x82, 0xb0, 0x22,
	0x26, 0xd6, 0xe8, 0x1b, 0xf0, 0xa7, 0xc6, 0x46, 0x0a, 0xa4, 0x02, 0xd1, 0x15, 0xb9, 0xd0, 0x81,
	0x36, 0x14, 0x5b, 0xdb, 0xa2, 0x69, 0x7c, 0x19, 0xdf, 0xc6, 0xf8, 0x54, 0x9a, 0xde, 0x16, 0x71,
	0xa1, 0x31, 0xec, 0xce, 0x9c, 0x33, 0x93, 0x99, 0x5f, 0x32, 0x00, 0x6d, 0xf4, 0x3c, 0x2d, 0x08,
	0xfd, 0xd8, 0xa7, 0xb2, 0x33, 0x65, 0x11, 0x6a, 0xc1, 0xb4, 0xfe, 0x46, 0x40, 0x4c, 0x03, 0xaa,
	0x40, 0x21, 0xf4, 0x9f, 0x55, 0x52, 0x23, 0x8d, 0x8a, 0x95, 0x4a, 0x7a, 0x04, 0xa5, 0x39, 0x5b,
	0xb9, 0x5e, 0xa2, 0x0a, 0xdc, 0xcc, 0x2b, 0x7a, 0x02, 0xe5, 0xc7, 0x35, 0xf3, 0xdc, 0xb9, 0x8b,
	0xa1, 0x5a, 0xe0, 0xd1, 0xd6, 0x48, 0xd3, 0xd8, 0x5d, 0x61, 0x14, 0xb3, 0x55, 0xa0, 0x8a, 0x35,
	0xd2, 0x10, 0xad, 0xad, 0x41, 0xcf, 0xa1, 0x3c, 0x43, 0xcf, 0x9b, 0xc4, 0x49, 0x80, 0x6a, 0xb1,
	0x46, 0x1a, 0xd5, 0x4b, 0xaa, 0x6d, 0x8e, 0xd1, 0xd2, 0x43, 0x86, 0x49, 0x80, 0x96, 0x3c, 0xcb,
	0x15, 0x3d, 0x80, 0xe2, 0x13, 0xf3, 0xd6, 0xa8, 0x96, 0xf8, 0xa2, 0xac, 0xa0, 0x14, 0xc4, 0x98,
	0x2d, 0x22, 0x55, 0xe2, 0x26, 0xd7, 0xf5, 0x77, 0x02, 0xf2, 0x0d, 0x26, 0x63, 0xde, 0xf0, 0x45,
	0x23, 0xfc, 0x44, 0x23, 0xfc, 0x4e, 0x23, 0xec, 0x42, 0x73, 0x06, 0xf2, 0x12, 0x93, 0xbf, 0x60,
	0xa4, 0x25, 0x26, 0xbb, 0xb1, 0x9c, 0xbe, 0x80, 0xbc, 0x19, 0xa7, 0xff, 0x41, 0x32, 0x8d, 0x9e,
	0x61, 0x8e, 0x4c, 0xe5, 0x1f, 0x95, 0xa0, 0x30, 0x18, 0x0d, 0x15, 0x91, 0x02, 0x94, 0x3a, 0x7a,
	0x57, 0x1f, 0xea, 0x8a, 0x4c, 0x8f, 0xe1, 0x30, 0xd3, 0x93, 0xab, 0xa6, 0x69, 0x74, 0xef, 0x27,
	0x63, 0xdd, 0xba, 0x35, 0xfa, 0x3d, 0x05, 0xe8, 0x3e, 0xec, 0xe5, 0x51, 0xbb, 0xdf, 0x1d, 0x99,
	0x3d, 0xa5, 0xf2, 0xcd, 0xca, 0xba, 0x95, 0x2a, 0xad, 0x80, 0x64, 0x36, 0xef, 0xf8, 0x8a, 0x0f,
	0xd2, 0xea, 0xc0, 0x85, 0x1f, 0x2e, 0x34, 0x16, 0xb0, 0x99, 0x83, 0x9a, 0xc3, 0x6c, 0xdf, 0x0f,
	0x72, 0xac, 0xc8, 0x61, 0x36, 0xda, 0xd9, 0x13, 0x4d, 0xd7, 0x73, 0x6d, 0x81, 0x0f, 0x18, 0xb2,
	0x18, 0xed, 0x16, 0xff, 0xae, 0x41, 0xea, 0x47, 0xd7, 0xe4, 0x95, 0x90, 0xcf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x91, 0x86, 0x38, 0xaf, 0x6f, 0x02, 0x00, 0x00,
}
