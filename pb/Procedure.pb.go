// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Procedure.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	anypb "google.golang.org/protobuf/types/known/anypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProcedureState int32

const (
	ProcedureState_INITIALIZING    ProcedureState = 1
	ProcedureState_RUNNABLE        ProcedureState = 2
	ProcedureState_WAITING         ProcedureState = 3
	ProcedureState_WAITING_TIMEOUT ProcedureState = 4
	ProcedureState_ROLLEDBACK      ProcedureState = 5
	ProcedureState_SUCCESS         ProcedureState = 6
	ProcedureState_FAILED          ProcedureState = 7
)

var ProcedureState_name = map[int32]string{
	1: "INITIALIZING",
	2: "RUNNABLE",
	3: "WAITING",
	4: "WAITING_TIMEOUT",
	5: "ROLLEDBACK",
	6: "SUCCESS",
	7: "FAILED",
}

var ProcedureState_value = map[string]int32{
	"INITIALIZING":    1,
	"RUNNABLE":        2,
	"WAITING":         3,
	"WAITING_TIMEOUT": 4,
	"ROLLEDBACK":      5,
	"SUCCESS":         6,
	"FAILED":          7,
}

func (x ProcedureState) Enum() *ProcedureState {
	p := new(ProcedureState)
	*p = x
	return p
}

func (x ProcedureState) String() string {
	return proto.EnumName(ProcedureState_name, int32(x))
}

func (x *ProcedureState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProcedureState_value, data, "ProcedureState")
	if err != nil {
		return err
	}
	*x = ProcedureState(value)
	return nil
}

func (ProcedureState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4ab1bb0f6ea31940, []int{0}
}

type ProcedureWALEntry_Type int32

const (
	ProcedureWALEntry_PROCEDURE_WAL_EOF     ProcedureWALEntry_Type = 1
	ProcedureWALEntry_PROCEDURE_WAL_INIT    ProcedureWALEntry_Type = 2
	ProcedureWALEntry_PROCEDURE_WAL_INSERT  ProcedureWALEntry_Type = 3
	ProcedureWALEntry_PROCEDURE_WAL_UPDATE  ProcedureWALEntry_Type = 4
	ProcedureWALEntry_PROCEDURE_WAL_DELETE  ProcedureWALEntry_Type = 5
	ProcedureWALEntry_PROCEDURE_WAL_COMPACT ProcedureWALEntry_Type = 6
)

var ProcedureWALEntry_Type_name = map[int32]string{
	1: "PROCEDURE_WAL_EOF",
	2: "PROCEDURE_WAL_INIT",
	3: "PROCEDURE_WAL_INSERT",
	4: "PROCEDURE_WAL_UPDATE",
	5: "PROCEDURE_WAL_DELETE",
	6: "PROCEDURE_WAL_COMPACT",
}

var ProcedureWALEntry_Type_value = map[string]int32{
	"PROCEDURE_WAL_EOF":     1,
	"PROCEDURE_WAL_INIT":    2,
	"PROCEDURE_WAL_INSERT":  3,
	"PROCEDURE_WAL_UPDATE":  4,
	"PROCEDURE_WAL_DELETE":  5,
	"PROCEDURE_WAL_COMPACT": 6,
}

func (x ProcedureWALEntry_Type) Enum() *ProcedureWALEntry_Type {
	p := new(ProcedureWALEntry_Type)
	*p = x
	return p
}

func (x ProcedureWALEntry_Type) String() string {
	return proto.EnumName(ProcedureWALEntry_Type_name, int32(x))
}

func (x *ProcedureWALEntry_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProcedureWALEntry_Type_value, data, "ProcedureWALEntry_Type")
	if err != nil {
		return err
	}
	*x = ProcedureWALEntry_Type(value)
	return nil
}

func (ProcedureWALEntry_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4ab1bb0f6ea31940, []int{6, 0}
}

//*
// Procedure metadata, serialized by the ProcedureStore to be able to recover the old state.
type Procedure struct {
	// internal "static" state
	ClassName     *string `protobuf:"bytes,1,req,name=class_name,json=className" json:"class_name,omitempty"`
	ParentId      *uint64 `protobuf:"varint,2,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	ProcId        *uint64 `protobuf:"varint,3,req,name=proc_id,json=procId" json:"proc_id,omitempty"`
	SubmittedTime *uint64 `protobuf:"varint,4,req,name=submitted_time,json=submittedTime" json:"submitted_time,omitempty"`
	Owner         *string `protobuf:"bytes,5,opt,name=owner" json:"owner,omitempty"`
	// internal "runtime" state
	State      *ProcedureState `protobuf:"varint,6,req,name=state,enum=hbase.pb.ProcedureState" json:"state,omitempty"`
	StackId    []uint32        `protobuf:"varint,7,rep,name=stack_id,json=stackId" json:"stack_id,omitempty"`
	LastUpdate *uint64         `protobuf:"varint,8,req,name=last_update,json=lastUpdate" json:"last_update,omitempty"`
	Timeout    *uint32         `protobuf:"varint,9,opt,name=timeout" json:"timeout,omitempty"`
	// user state/results
	Exception    *ForeignExceptionMessage `protobuf:"bytes,10,opt,name=exception" json:"exception,omitempty"`
	Result       []byte                   `protobuf:"bytes,11,opt,name=result" json:"result,omitempty"`
	StateData    []byte                   `protobuf:"bytes,12,opt,name=state_data,json=stateData" json:"state_data,omitempty"`
	StateMessage []*anypb.Any             `protobuf:"bytes,15,rep,name=state_message,json=stateMessage" json:"state_message,omitempty"`
	// Nonce to prevent same procedure submit by multiple times
	NonceGroup *uint64 `protobuf:"varint,13,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce      *uint64 `protobuf:"varint,14,opt,name=nonce,def=0" json:"nonce,omitempty"`
	// whether the procedure has held the lock
	Locked *bool `protobuf:"varint,16,opt,name=locked,def=0" json:"locked,omitempty"`
	// whether the procedure need to be bypassed
	Bypass               *bool    `protobuf:"varint,17,opt,name=bypass,def=0" json:"bypass,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Procedure) Reset()         { *m = Procedure{} }
func (m *Procedure) String() string { return proto.CompactTextString(m) }
func (*Procedure) ProtoMessage()    {}
func (*Procedure) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ab1bb0f6ea31940, []int{0}
}

func (m *Procedure) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Procedure.Unmarshal(m, b)
}
func (m *Procedure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Procedure.Marshal(b, m, deterministic)
}
func (m *Procedure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Procedure.Merge(m, src)
}
func (m *Procedure) XXX_Size() int {
	return xxx_messageInfo_Procedure.Size(m)
}
func (m *Procedure) XXX_DiscardUnknown() {
	xxx_messageInfo_Procedure.DiscardUnknown(m)
}

var xxx_messageInfo_Procedure proto.InternalMessageInfo

const Default_Procedure_NonceGroup uint64 = 0
const Default_Procedure_Nonce uint64 = 0
const Default_Procedure_Locked bool = false
const Default_Procedure_Bypass bool = false

func (m *Procedure) GetClassName() string {
	if m != nil && m.ClassName != nil {
		return *m.ClassName
	}
	return ""
}

func (m *Procedure) GetParentId() uint64 {
	if m != nil && m.ParentId != nil {
		return *m.ParentId
	}
	return 0
}

func (m *Procedure) GetProcId() uint64 {
	if m != nil && m.ProcId != nil {
		return *m.ProcId
	}
	return 0
}

func (m *Procedure) GetSubmittedTime() uint64 {
	if m != nil && m.SubmittedTime != nil {
		return *m.SubmittedTime
	}
	return 0
}

func (m *Procedure) GetOwner() string {
	if m != nil && m.Owner != nil {
		return *m.Owner
	}
	return ""
}

func (m *Procedure) GetState() ProcedureState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ProcedureState_INITIALIZING
}

func (m *Procedure) GetStackId() []uint32 {
	if m != nil {
		return m.StackId
	}
	return nil
}

func (m *Procedure) GetLastUpdate() uint64 {
	if m != nil && m.LastUpdate != nil {
		return *m.LastUpdate
	}
	return 0
}

func (m *Procedure) GetTimeout() uint32 {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return 0
}

func (m *Procedure) GetException() *ForeignExceptionMessage {
	if m != nil {
		return m.Exception
	}
	return nil
}

func (m *Procedure) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *Procedure) GetStateData() []byte {
	if m != nil {
		return m.StateData
	}
	return nil
}

func (m *Procedure) GetStateMessage() []*anypb.Any {
	if m != nil {
		return m.StateMessage
	}
	return nil
}

func (m *Procedure) GetNonceGroup() uint64 {
	if m != nil && m.NonceGroup != nil {
		return *m.NonceGroup
	}
	return Default_Procedure_NonceGroup
}

func (m *Procedure) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return Default_Procedure_Nonce
}

func (m *Procedure) GetLocked() bool {
	if m != nil && m.Locked != nil {
		return *m.Locked
	}
	return Default_Procedure_Locked
}

func (m *Procedure) GetBypass() bool {
	if m != nil && m.Bypass != nil {
		return *m.Bypass
	}
	return Default_Procedure_Bypass
}

//*
// SequentialProcedure data
type SequentialProcedureData struct {
	Executed             *bool    `protobuf:"varint,1,req,name=executed" json:"executed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SequentialProcedureData) Reset()         { *m = SequentialProcedureData{} }
func (m *SequentialProcedureData) String() string { return proto.CompactTextString(m) }
func (*SequentialProcedureData) ProtoMessage()    {}
func (*SequentialProcedureData) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ab1bb0f6ea31940, []int{1}
}

func (m *SequentialProcedureData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SequentialProcedureData.Unmarshal(m, b)
}
func (m *SequentialProcedureData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SequentialProcedureData.Marshal(b, m, deterministic)
}
func (m *SequentialProcedureData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SequentialProcedureData.Merge(m, src)
}
func (m *SequentialProcedureData) XXX_Size() int {
	return xxx_messageInfo_SequentialProcedureData.Size(m)
}
func (m *SequentialProcedureData) XXX_DiscardUnknown() {
	xxx_messageInfo_SequentialProcedureData.DiscardUnknown(m)
}

var xxx_messageInfo_SequentialProcedureData proto.InternalMessageInfo

func (m *SequentialProcedureData) GetExecuted() bool {
	if m != nil && m.Executed != nil {
		return *m.Executed
	}
	return false
}

//*
// StateMachineProcedure data
type StateMachineProcedureData struct {
	State                []uint32 `protobuf:"varint,1,rep,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateMachineProcedureData) Reset()         { *m = StateMachineProcedureData{} }
func (m *StateMachineProcedureData) String() string { return proto.CompactTextString(m) }
func (*StateMachineProcedureData) ProtoMessage()    {}
func (*StateMachineProcedureData) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ab1bb0f6ea31940, []int{2}
}

func (m *StateMachineProcedureData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateMachineProcedureData.Unmarshal(m, b)
}
func (m *StateMachineProcedureData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateMachineProcedureData.Marshal(b, m, deterministic)
}
func (m *StateMachineProcedureData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateMachineProcedureData.Merge(m, src)
}
func (m *StateMachineProcedureData) XXX_Size() int {
	return xxx_messageInfo_StateMachineProcedureData.Size(m)
}
func (m *StateMachineProcedureData) XXX_DiscardUnknown() {
	xxx_messageInfo_StateMachineProcedureData.DiscardUnknown(m)
}

var xxx_messageInfo_StateMachineProcedureData proto.InternalMessageInfo

func (m *StateMachineProcedureData) GetState() []uint32 {
	if m != nil {
		return m.State
	}
	return nil
}

//*
// Procedure WAL header
type ProcedureWALHeader struct {
	Version              *uint32  `protobuf:"varint,1,req,name=version" json:"version,omitempty"`
	Type                 *uint32  `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	LogId                *uint64  `protobuf:"varint,3,req,name=log_id,json=logId" json:"log_id,omitempty"`
	MinProcId            *uint64  `protobuf:"varint,4,req,name=min_proc_id,json=minProcId" json:"min_proc_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcedureWALHeader) Reset()         { *m = ProcedureWALHeader{} }
func (m *ProcedureWALHeader) String() string { return proto.CompactTextString(m) }
func (*ProcedureWALHeader) ProtoMessage()    {}
func (*ProcedureWALHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ab1bb0f6ea31940, []int{3}
}

func (m *ProcedureWALHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcedureWALHeader.Unmarshal(m, b)
}
func (m *ProcedureWALHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcedureWALHeader.Marshal(b, m, deterministic)
}
func (m *ProcedureWALHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcedureWALHeader.Merge(m, src)
}
func (m *ProcedureWALHeader) XXX_Size() int {
	return xxx_messageInfo_ProcedureWALHeader.Size(m)
}
func (m *ProcedureWALHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcedureWALHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ProcedureWALHeader proto.InternalMessageInfo

func (m *ProcedureWALHeader) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *ProcedureWALHeader) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ProcedureWALHeader) GetLogId() uint64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *ProcedureWALHeader) GetMinProcId() uint64 {
	if m != nil && m.MinProcId != nil {
		return *m.MinProcId
	}
	return 0
}

//*
// Procedure WAL trailer
type ProcedureWALTrailer struct {
	Version              *uint32  `protobuf:"varint,1,req,name=version" json:"version,omitempty"`
	TrackerPos           *uint64  `protobuf:"varint,2,req,name=tracker_pos,json=trackerPos" json:"tracker_pos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcedureWALTrailer) Reset()         { *m = ProcedureWALTrailer{} }
func (m *ProcedureWALTrailer) String() string { return proto.CompactTextString(m) }
func (*ProcedureWALTrailer) ProtoMessage()    {}
func (*ProcedureWALTrailer) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ab1bb0f6ea31940, []int{4}
}

func (m *ProcedureWALTrailer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcedureWALTrailer.Unmarshal(m, b)
}
func (m *ProcedureWALTrailer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcedureWALTrailer.Marshal(b, m, deterministic)
}
func (m *ProcedureWALTrailer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcedureWALTrailer.Merge(m, src)
}
func (m *ProcedureWALTrailer) XXX_Size() int {
	return xxx_messageInfo_ProcedureWALTrailer.Size(m)
}
func (m *ProcedureWALTrailer) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcedureWALTrailer.DiscardUnknown(m)
}

var xxx_messageInfo_ProcedureWALTrailer proto.InternalMessageInfo

func (m *ProcedureWALTrailer) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *ProcedureWALTrailer) GetTrackerPos() uint64 {
	if m != nil && m.TrackerPos != nil {
		return *m.TrackerPos
	}
	return 0
}

type ProcedureStoreTracker struct {
	Node                 []*ProcedureStoreTracker_TrackerNode `protobuf:"bytes,1,rep,name=node" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *ProcedureStoreTracker) Reset()         { *m = ProcedureStoreTracker{} }
func (m *ProcedureStoreTracker) String() string { return proto.CompactTextString(m) }
func (*ProcedureStoreTracker) ProtoMessage()    {}
func (*ProcedureStoreTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ab1bb0f6ea31940, []int{5}
}

func (m *ProcedureStoreTracker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcedureStoreTracker.Unmarshal(m, b)
}
func (m *ProcedureStoreTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcedureStoreTracker.Marshal(b, m, deterministic)
}
func (m *ProcedureStoreTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcedureStoreTracker.Merge(m, src)
}
func (m *ProcedureStoreTracker) XXX_Size() int {
	return xxx_messageInfo_ProcedureStoreTracker.Size(m)
}
func (m *ProcedureStoreTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcedureStoreTracker.DiscardUnknown(m)
}

var xxx_messageInfo_ProcedureStoreTracker proto.InternalMessageInfo

func (m *ProcedureStoreTracker) GetNode() []*ProcedureStoreTracker_TrackerNode {
	if m != nil {
		return m.Node
	}
	return nil
}

type ProcedureStoreTracker_TrackerNode struct {
	StartId              *uint64  `protobuf:"varint,1,req,name=start_id,json=startId" json:"start_id,omitempty"`
	Updated              []uint64 `protobuf:"varint,2,rep,name=updated" json:"updated,omitempty"`
	Deleted              []uint64 `protobuf:"varint,3,rep,name=deleted" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcedureStoreTracker_TrackerNode) Reset()         { *m = ProcedureStoreTracker_TrackerNode{} }
func (m *ProcedureStoreTracker_TrackerNode) String() string { return proto.CompactTextString(m) }
func (*ProcedureStoreTracker_TrackerNode) ProtoMessage()    {}
func (*ProcedureStoreTracker_TrackerNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ab1bb0f6ea31940, []int{5, 0}
}

func (m *ProcedureStoreTracker_TrackerNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcedureStoreTracker_TrackerNode.Unmarshal(m, b)
}
func (m *ProcedureStoreTracker_TrackerNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcedureStoreTracker_TrackerNode.Marshal(b, m, deterministic)
}
func (m *ProcedureStoreTracker_TrackerNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcedureStoreTracker_TrackerNode.Merge(m, src)
}
func (m *ProcedureStoreTracker_TrackerNode) XXX_Size() int {
	return xxx_messageInfo_ProcedureStoreTracker_TrackerNode.Size(m)
}
func (m *ProcedureStoreTracker_TrackerNode) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcedureStoreTracker_TrackerNode.DiscardUnknown(m)
}

var xxx_messageInfo_ProcedureStoreTracker_TrackerNode proto.InternalMessageInfo

func (m *ProcedureStoreTracker_TrackerNode) GetStartId() uint64 {
	if m != nil && m.StartId != nil {
		return *m.StartId
	}
	return 0
}

func (m *ProcedureStoreTracker_TrackerNode) GetUpdated() []uint64 {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *ProcedureStoreTracker_TrackerNode) GetDeleted() []uint64 {
	if m != nil {
		return m.Deleted
	}
	return nil
}

type ProcedureWALEntry struct {
	Type                 *ProcedureWALEntry_Type `protobuf:"varint,1,req,name=type,enum=hbase.pb.ProcedureWALEntry_Type" json:"type,omitempty"`
	Procedure            []*Procedure            `protobuf:"bytes,2,rep,name=procedure" json:"procedure,omitempty"`
	ProcId               *uint64                 `protobuf:"varint,3,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
	ChildId              []uint64                `protobuf:"varint,4,rep,name=child_id,json=childId" json:"child_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ProcedureWALEntry) Reset()         { *m = ProcedureWALEntry{} }
func (m *ProcedureWALEntry) String() string { return proto.CompactTextString(m) }
func (*ProcedureWALEntry) ProtoMessage()    {}
func (*ProcedureWALEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ab1bb0f6ea31940, []int{6}
}

func (m *ProcedureWALEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcedureWALEntry.Unmarshal(m, b)
}
func (m *ProcedureWALEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcedureWALEntry.Marshal(b, m, deterministic)
}
func (m *ProcedureWALEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcedureWALEntry.Merge(m, src)
}
func (m *ProcedureWALEntry) XXX_Size() int {
	return xxx_messageInfo_ProcedureWALEntry.Size(m)
}
func (m *ProcedureWALEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcedureWALEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ProcedureWALEntry proto.InternalMessageInfo

func (m *ProcedureWALEntry) GetType() ProcedureWALEntry_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ProcedureWALEntry_PROCEDURE_WAL_EOF
}

func (m *ProcedureWALEntry) GetProcedure() []*Procedure {
	if m != nil {
		return m.Procedure
	}
	return nil
}

func (m *ProcedureWALEntry) GetProcId() uint64 {
	if m != nil && m.ProcId != nil {
		return *m.ProcId
	}
	return 0
}

func (m *ProcedureWALEntry) GetChildId() []uint64 {
	if m != nil {
		return m.ChildId
	}
	return nil
}

func init() {
	proto.RegisterEnum("hbase.pb.ProcedureState", ProcedureState_name, ProcedureState_value)
	proto.RegisterEnum("hbase.pb.ProcedureWALEntry_Type", ProcedureWALEntry_Type_name, ProcedureWALEntry_Type_value)
	proto.RegisterType((*Procedure)(nil), "hbase.pb.Procedure")
	proto.RegisterType((*SequentialProcedureData)(nil), "hbase.pb.SequentialProcedureData")
	proto.RegisterType((*StateMachineProcedureData)(nil), "hbase.pb.StateMachineProcedureData")
	proto.RegisterType((*ProcedureWALHeader)(nil), "hbase.pb.ProcedureWALHeader")
	proto.RegisterType((*ProcedureWALTrailer)(nil), "hbase.pb.ProcedureWALTrailer")
	proto.RegisterType((*ProcedureStoreTracker)(nil), "hbase.pb.ProcedureStoreTracker")
	proto.RegisterType((*ProcedureStoreTracker_TrackerNode)(nil), "hbase.pb.ProcedureStoreTracker.TrackerNode")
	proto.RegisterType((*ProcedureWALEntry)(nil), "hbase.pb.ProcedureWALEntry")
}

func init() { proto.RegisterFile("Procedure.proto", fileDescriptor_4ab1bb0f6ea31940) }

var fileDescriptor_4ab1bb0f6ea31940 = []byte{
	// 947 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0xed, 0x6e, 0xdb, 0x36,
	0x14, 0x05, 0xfd, 0xed, 0xab, 0x24, 0x55, 0x98, 0xa4, 0x51, 0x32, 0x74, 0xd5, 0x0c, 0x0c, 0x30,
	0x36, 0x40, 0x5d, 0x82, 0xed, 0xc7, 0xfa, 0xa7, 0x70, 0x6c, 0xa5, 0x11, 0xe6, 0x38, 0x06, 0x2d,
	0x23, 0xc0, 0x30, 0x40, 0x60, 0x44, 0xd6, 0x16, 0x22, 0x8b, 0x1a, 0x25, 0x6f, 0x35, 0xf6, 0x02,
	0x7b, 0x8a, 0x61, 0x4f, 0xb1, 0xf7, 0xe8, 0x1b, 0x0d, 0xa4, 0x64, 0x3b, 0x5e, 0x83, 0xfd, 0x4a,
	0xce, 0x39, 0x97, 0xe2, 0x21, 0xcf, 0xbd, 0x34, 0xbc, 0x18, 0x4b, 0x11, 0x72, 0xb6, 0x94, 0xdc,
	0x49, 0xa5, 0xc8, 0x05, 0x6e, 0xcd, 0x1f, 0x68, 0xc6, 0x9d, 0xf4, 0xe1, 0xfc, 0x6c, 0x26, 0xc4,
	0x2c, 0xe6, 0x6f, 0x34, 0xff, 0xb0, 0xfc, 0xf0, 0x86, 0x26, 0xab, 0xa2, 0xe8, 0xfc, 0xc8, 0x95,
	0x52, 0xc8, 0x1b, 0x9a, 0xb0, 0x38, 0x4a, 0x66, 0x05, 0xd9, 0xf9, 0x54, 0x83, 0xf6, 0xe6, 0x6b,
	0xf8, 0x15, 0x40, 0x18, 0xd3, 0x2c, 0x0b, 0x12, 0xba, 0xe0, 0x16, 0xb2, 0x2b, 0xdd, 0x36, 0x69,
	0x6b, 0x66, 0x44, 0x17, 0x1c, 0x7f, 0x01, 0xed, 0x94, 0x4a, 0x9e, 0xe4, 0x41, 0xc4, 0xac, 0x8a,
	0x8d, 0xba, 0x35, 0xd2, 0x2a, 0x08, 0x8f, 0xe1, 0x53, 0x68, 0xa6, 0x52, 0x84, 0x4a, 0xaa, 0xda,
	0x95, 0x6e, 0x8d, 0x34, 0x14, 0xf4, 0x18, 0xfe, 0x1a, 0x0e, 0xb2, 0xe5, 0xc3, 0x22, 0xca, 0x73,
	0xce, 0x82, 0x3c, 0x5a, 0x70, 0xab, 0xa6, 0xf5, 0xfd, 0x0d, 0xeb, 0x47, 0x0b, 0x8e, 0x8f, 0xa1,
	0x2e, 0x7e, 0x4f, 0xb8, 0xb4, 0xea, 0x36, 0xea, 0xb6, 0x49, 0x01, 0xb0, 0x03, 0xf5, 0x2c, 0xa7,
	0x39, 0xb7, 0x1a, 0x76, 0xa5, 0x7b, 0x70, 0x69, 0x39, 0xeb, 0x93, 0x3a, 0x1b, 0xd7, 0x13, 0xa5,
	0x93, 0xa2, 0x0c, 0x9f, 0x41, 0x2b, 0xcb, 0x69, 0xf8, 0xa8, 0x6c, 0x34, 0xed, 0x6a, 0x77, 0x9f,
	0x34, 0x35, 0xf6, 0x18, 0x7e, 0x0d, 0x46, 0x4c, 0xb3, 0x3c, 0x58, 0xa6, 0x4c, 0x7d, 0xb0, 0xa5,
	0x4d, 0x80, 0xa2, 0xa6, 0x9a, 0xc1, 0x16, 0x34, 0x95, 0x3d, 0xb1, 0xcc, 0xad, 0xb6, 0x8d, 0xd4,
	0xd2, 0x12, 0xe2, 0x77, 0xd0, 0xe6, 0x1f, 0x43, 0x9e, 0xe6, 0x91, 0x48, 0x2c, 0xb0, 0x51, 0xd7,
	0xb8, 0xfc, 0x6a, 0xeb, 0xe4, 0x5a, 0x48, 0x1e, 0xcd, 0x12, 0x77, 0x5d, 0x71, 0xcb, 0xb3, 0x8c,
	0xce, 0x38, 0xd9, 0xae, 0xc1, 0x2f, 0xa1, 0x21, 0x79, 0xb6, 0x8c, 0x73, 0xcb, 0xb0, 0x51, 0x77,
	0x8f, 0x94, 0x48, 0x5d, 0xb8, 0xf6, 0x1d, 0x30, 0x9a, 0x53, 0x6b, 0x4f, 0x6b, 0x6d, 0xcd, 0x0c,
	0x68, 0x4e, 0xf1, 0x8f, 0xb0, 0x5f, 0xc8, 0x8b, 0xe2, 0x93, 0xd6, 0x0b, 0xbb, 0xda, 0x35, 0x2e,
	0x8f, 0x9d, 0x22, 0x65, 0x67, 0x9d, 0xb2, 0xd3, 0x4b, 0x56, 0x64, 0x4f, 0x97, 0x96, 0x9b, 0xe3,
	0x0e, 0x18, 0x89, 0x48, 0x42, 0x1e, 0xcc, 0xa4, 0x58, 0xa6, 0xd6, 0xbe, 0x4a, 0xeb, 0x2d, 0xfa,
	0x8e, 0x80, 0x66, 0xdf, 0x2b, 0x12, 0x9f, 0x42, 0x5d, 0x23, 0xeb, 0x60, 0xad, 0x16, 0x18, 0xbf,
	0x82, 0x46, 0x2c, 0xc2, 0x47, 0xce, 0x2c, 0xd3, 0x46, 0xdd, 0xd6, 0xdb, 0xfa, 0x07, 0x1a, 0x67,
	0x9c, 0x94, 0xa4, 0x92, 0x1f, 0x56, 0x29, 0xcd, 0x32, 0xeb, 0x70, 0x47, 0x2e, 0xc8, 0xce, 0x0f,
	0x70, 0x3a, 0xe1, 0xbf, 0x2e, 0x79, 0x92, 0x47, 0x34, 0xde, 0xc4, 0xa4, 0x0f, 0x74, 0x0e, 0x2d,
	0xfe, 0x91, 0x87, 0xcb, 0x9c, 0x33, 0xdd, 0x5e, 0x2d, 0xb2, 0xc1, 0x9d, 0x0b, 0x38, 0xd3, 0x51,
	0xde, 0xd2, 0x70, 0x1e, 0x25, 0x7c, 0x77, 0xe1, 0xf1, 0xba, 0x0f, 0x90, 0x0e, 0xb5, 0x00, 0x9d,
	0x15, 0xe0, 0x4d, 0xd9, 0x7d, 0x6f, 0x78, 0xc3, 0x29, 0xe3, 0x52, 0xe5, 0xf8, 0x1b, 0x97, 0x99,
	0xca, 0x4a, 0xed, 0xb1, 0x4f, 0xd6, 0x10, 0x63, 0xa8, 0xe5, 0xab, 0x94, 0x5b, 0x15, 0x4d, 0xeb,
	0xff, 0xf1, 0x89, 0x3a, 0xeb, 0x6c, 0xdb, 0xb6, 0xf5, 0x58, 0xcc, 0x3c, 0x86, 0xbf, 0x04, 0x63,
	0x11, 0x25, 0xc1, 0xba, 0xa5, 0x8b, 0x96, 0x6d, 0x2f, 0xa2, 0x64, 0xac, 0xbb, 0xba, 0x33, 0x86,
	0xa3, 0xa7, 0x5b, 0xfb, 0x92, 0x46, 0xf1, 0xff, 0xee, 0xfd, 0x1a, 0x8c, 0x5c, 0xd2, 0xf0, 0x91,
	0xcb, 0x20, 0x15, 0x99, 0xb6, 0x50, 0x23, 0x50, 0x52, 0x63, 0x91, 0x75, 0xfe, 0x41, 0x70, 0xf2,
	0xa4, 0xa9, 0x85, 0xe4, 0x7e, 0x21, 0xe2, 0x77, 0x50, 0x4b, 0x04, 0x2b, 0xce, 0x6e, 0x5c, 0x7e,
	0xfb, 0xec, 0x0c, 0x6c, 0xcb, 0x9d, 0xf2, 0xef, 0x48, 0x30, 0x4e, 0xf4, 0xc2, 0xf3, 0x5f, 0xc0,
	0x78, 0x42, 0x96, 0x43, 0x22, 0xf5, 0x18, 0x23, 0xed, 0xa3, 0xa9, 0xb1, 0xc7, 0x94, 0xff, 0x62,
	0x3e, 0xd4, 0x80, 0x57, 0x95, 0x52, 0x42, 0xa5, 0x30, 0x1e, 0x73, 0xa5, 0x54, 0x0b, 0xa5, 0x84,
	0x9d, 0x4f, 0x15, 0x38, 0x7c, 0x7a, 0x17, 0x6e, 0x92, 0xcb, 0x15, 0xfe, 0xbe, 0xbc, 0x6b, 0xa4,
	0x07, 0xd7, 0x7e, 0xc6, 0xf4, 0xba, 0xd4, 0xf1, 0x57, 0x29, 0x2f, 0xd3, 0xb8, 0x80, 0x76, 0xba,
	0xd6, 0xb5, 0x03, 0xe3, 0xf2, 0xe8, 0x99, 0xa5, 0x64, 0x5b, 0xb5, 0xfb, 0xf0, 0xa0, 0x27, 0x0f,
	0xcf, 0x19, 0xb4, 0xc2, 0x79, 0x14, 0xb3, 0x22, 0x3f, 0x6d, 0x59, 0x63, 0x8f, 0x75, 0xfe, 0x42,
	0x50, 0xf3, 0x8b, 0xf4, 0x0f, 0xc7, 0xe4, 0xae, 0xef, 0x0e, 0xa6, 0xc4, 0x0d, 0xee, 0x7b, 0xc3,
	0xc0, 0xbd, 0xbb, 0x36, 0x11, 0x7e, 0x09, 0x78, 0x97, 0xf6, 0x46, 0x9e, 0x6f, 0x56, 0xb0, 0x05,
	0xc7, 0xff, 0xe5, 0x27, 0x2e, 0xf1, 0xcd, 0xea, 0xe7, 0xca, 0x74, 0x3c, 0xe8, 0xf9, 0xae, 0x59,
	0xfb, 0x5c, 0x19, 0xb8, 0x43, 0xd7, 0x77, 0xcd, 0x3a, 0x3e, 0x83, 0x93, 0x5d, 0xa5, 0x7f, 0x77,
	0x3b, 0xee, 0xf5, 0x7d, 0xb3, 0xf1, 0xcd, 0x1f, 0x70, 0xb0, 0xfb, 0xc0, 0x61, 0x13, 0xf6, 0x94,
	0x09, 0xaf, 0x37, 0xf4, 0x7e, 0xf6, 0x46, 0xef, 0x4d, 0x84, 0xf7, 0xa0, 0x45, 0xa6, 0xa3, 0x51,
	0xef, 0x6a, 0xe8, 0x9a, 0x15, 0x6c, 0x40, 0xf3, 0xbe, 0xe7, 0xf9, 0x4a, 0xaa, 0xe2, 0x23, 0x78,
	0x51, 0x82, 0xc0, 0xf7, 0x6e, 0xdd, 0xbb, 0xa9, 0x6f, 0xd6, 0xf0, 0x01, 0x00, 0xb9, 0x1b, 0x0e,
	0xdd, 0xc1, 0x55, 0xaf, 0xff, 0x93, 0x59, 0x57, 0x2b, 0x26, 0xd3, 0x7e, 0xdf, 0x9d, 0x4c, 0xcc,
	0x06, 0x06, 0x68, 0x5c, 0xf7, 0xbc, 0xa1, 0x3b, 0x30, 0x9b, 0x57, 0x43, 0xb8, 0x10, 0x72, 0xe6,
	0xd0, 0x94, 0x86, 0x73, 0xee, 0xcc, 0x29, 0x13, 0x22, 0x2d, 0x43, 0xc8, 0xe6, 0x94, 0x71, 0xb6,
	0x7d, 0x78, 0x66, 0x3c, 0xe1, 0x52, 0xf5, 0xc7, 0xd5, 0xf6, 0x47, 0x69, 0xac, 0xc4, 0xec, 0x06,
	0xfd, 0x89, 0xd0, 0xdf, 0x08, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x03, 0x3a, 0xf3, 0x55, 0xae,
	0x06, 0x00, 0x00,
}
